承知いたしました。`.NET 標準の Microsoft.Extensions.Logging` を使用し、ファイルプロバイダーを組み合わせてログとデータベースキャッシュをユーザーフォルダに7日間保持する方法について、具体的なソースコードでご説明します。

`Microsoft.Extensions.Logging` 自体はファイル出力機能を持たないため、サードパーティ製のファイルロギングプロバイダーを利用するのが一般的です。ここでは、シンプルで`.NET 標準ロギング`と統合しやすい`Serilog`をファイル出力のバックエンドとして利用する方法が、最もバランスが良く推奨されます。Serilogは`Apache License 2.0`であり、商用利用に問題ありません。

もしSerilog以外のファイルプロバイダーをご希望であれば、その旨お知らせください。ただし、機能性や設定の容易さの面でSerilogが有力な選択肢となることが多いです。

-----

### プロジェクトの準備

1.  **NuGet パッケージのインストール**

      * `Microsoft.Extensions.Logging` （標準ロギングAPI）
      * `Microsoft.Extensions.Configuration` （設定ファイル読み込み用）
      * `Microsoft.Extensions.Configuration.Json` （JSON設定ファイル読み込み用）
      * `Serilog` （ロギングライブラリ本体）
      * `Serilog.Extensions.Logging` （`Microsoft.Extensions.Logging`と`Serilog`の統合用）
      * `Serilog.Sinks.File` （Serilogのファイル出力シンク）
      * `Serilog.Settings.Configuration` （Serilogが`IConfiguration`から設定を読み込むため）
      * `System.Text.Json` （データキャッシュのJSONシリアライズ/デシリアライズ用）

    PowerShell (NuGet パッケージ マネージャー コンソール) で以下のコマンドを実行します。

    ```powershell
    Install-Package Microsoft.Extensions.Logging
    Install-Package Microsoft.Extensions.Configuration
    Install-Package Microsoft.Extensions.Configuration.Json
    Install-Package Serilog
    Install-Package Serilog.Extensions.Logging
    Install-Package Serilog.Sinks.File
    Install-Package Serilog.Settings.Configuration
    Install-Package System.Text.Json
    ```

2.  **`appsettings.json` の作成**
    プロジェクトのルートに `appsettings.json` ファイルを作成し、以下の内容を記述します。
    プロパティウィンドウで「出力ディレクトリにコピー」を「常にコピーする」に設定してください。

    ```json
    {
      "Serilog": {
        "MinimumLevel": {
          "Default": "Information", // デフォルトのログレベル (Debug, Information, Warning, Error, Fatal)
          "Override": {
            "Microsoft": "Warning", // Microsoft関連のログはWarning以上のみ出力
            "System": "Warning"    // System関連のログはWarning以上のみ出力
          }
        },
        "WriteTo": [
          {
            "Name": "File",
            "Args": {
              // ユーザーのローカルAppDataフォルダにログを出力
              // 例: C:\Users\YourUser\AppData\Local\YourAppName\logs\log-20230701.txt
              "path": "%LOCALAPPDATA%/YourAppName/logs/log-.txt",
              "rollingInterval": "Day",             // 毎日新しいファイルを作成
              "retainedFileCountLimit": 7,          // 7世代のログファイルを保持
              "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}",
              "encoding": "utf-8"
            }
          }
        ],
        "Enrich": [
          "FromLogContext",
          "WithMachineName",
          "WithProcessId",
          "WithThreadId"
        ]
      }
    }
    ```

-----

### ソースコードの実装

#### 1\. アプリケーションのエントリポイント (`App.xaml.cs`)

アプリケーション起動時にロガーを初期化し、アプリケーション終了時にフラッシュする処理を記述します。

```csharp
using System.IO;
using System.Windows;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Serilog; // Serilog.Log を使うため

namespace YourAppName // プロジェクトの名前空間に合わせて変更してください
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        public static IServiceProvider ServiceProvider { get; private set; } // DIコンテナ

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // 1. 設定の読み込み (appsettings.json)
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .Build();

            // 2. Serilogの初期化
            // Microsoft.Extensions.Logging と統合するために、LoggerConfigurationからILoggerを構築
            Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(configuration) // appsettings.jsonから設定を読み込む
                .CreateLogger();

            // 3. DIコンテナの設定
            // LoggerFactoryを通じてMicrosoft.Extensions.Logging.ILoggerを提供する
            var serviceCollection = new ServiceCollection();
            ConfigureServices(serviceCollection, configuration);
            ServiceProvider = serviceCollection.BuildServiceProvider();

            // ログの開始メッセージ
            ServiceProvider.GetService<ILogger<App>>()?.LogInformation("アプリケーションが起動しました。");

            // メインウィンドウの表示
            var mainWindow = ServiceProvider.GetService<MainWindow>();
            mainWindow.Show();
        }

        private void ConfigureServices(IServiceCollection services, IConfiguration configuration)
        {
            // ロギングサービスを追加 (Serilogを内部的に使用)
            services.AddLogging(builder =>
            {
                builder.AddSerilog(dispose: true); // SerilogをMicrosoft.Extensions.Loggingに統合
                // builder.AddConfiguration(configuration.GetSection("Logging")); // 必要に応じて標準ロギングの設定も追加
            });

            // メインウィンドウをDIに登録
            services.AddSingleton<MainWindow>();

            // その他のサービス（例: データサービス、リポジトリなど）
            services.AddSingleton<DataCacheService>(); // データキャッシュサービスを登録
        }

        protected override void OnExit(ExitEventArgs e)
        {
            // ログバッファをフラッシュして、未書き込みのログを確実にファイルに保存
            Log.Information("アプリケーションが終了します。");
            Log.CloseAndFlush();

            // DIコンテナのリソースを解放
            (ServiceProvider as System.IDisposable)?.Dispose();

            base.OnExit(e);
        }
    }
}
```

#### 2\. メインウィンドウ (`MainWindow.xaml.cs`)

`ILogger<T>` をインジェクションしてログを記録します。

```csharp
using System.Windows;
using Microsoft.Extensions.Logging;
using System.Collections.ObjectModel; // MyDataItem のコレクション用
using System.Threading.Tasks; // 非同期処理用

namespace YourAppName
{
    public partial class MainWindow : Window
    {
        private readonly ILogger<MainWindow> _logger;
        private readonly DataCacheService _dataCacheService;
        public ObservableCollection<MyDataItem> DisplayedData { get; set; }

        public MainWindow(ILogger<MainWindow> logger, DataCacheService dataCacheService)
        {
            InitializeComponent();
            _logger = logger;
            _dataCacheService = dataCacheService;

            _logger.LogInformation("MainWindowが初期化されました。");

            // データグリッドにバインドするコレクションを初期化
            DisplayedData = new ObservableCollection<MyDataItem>();
            this.DataContext = this;

            // キャッシュデータとUIの更新を非同期で行う
            _ = LoadAndDisplayDataAsync();
        }

        private async Task LoadAndDisplayDataAsync()
        {
            _logger.LogInformation("データのロードと表示を開始します。");

            // キャッシュからデータを読み込む
            var cachedData = await _dataCacheService.LoadDataCacheAsync();

            if (cachedData != null && cachedData.Count > 0)
            {
                _logger.LogInformation("キャッシュからデータをロードしました。");
                DisplayedData.Clear();
                foreach (var item in cachedData)
                {
                    DisplayedData.Add(item);
                }
            }
            else
            {
                _logger.LogInformation("キャッシュが見つからないか、古いため、新しいデータを取得します。");
                // ここでデータベースなどから実際のデータを取得する処理を呼び出す
                var newData = await FetchDataFromDatabaseAsync(); // 仮のメソッド
                if (newData != null)
                {
                    DisplayedData.Clear();
                    foreach (var item in newData)
                    {
                        DisplayedData.Add(item);
                    }
                    // 新しいデータをキャッシュに保存
                    await _dataCacheService.SaveDataCacheAsync(newData);
                    _logger.LogInformation("新しいデータを取得し、キャッシュに保存しました。");
                }
                else
                {
                    _logger.LogWarning("データベースからのデータ取得に失敗しました。");
                }
            }
        }

        // 仮のデータベースからデータを取得するメソッド
        private async Task<List<MyDataItem>> FetchDataFromDatabaseAsync()
        {
            _logger.LogInformation("データベースからデータを取得中...");
            await Task.Delay(2000); // データベースアクセスをシミュレート
            return new List<MyDataItem>
            {
                new MyDataItem { Id = 1, Name = "Database Item 1", Value = 100, LastUpdated = DateTime.Now },
                new MyDataItem { Id = 2, Name = "Database Item 2", Value = 200, LastUpdated = DateTime.Now.AddDays(-1) },
                new MyDataItem { Id = 3, Name = "Database Item 3", Value = 300, LastUpdated = DateTime.Now.AddHours(-5) }
            };
        }

        // 例: 何かのボタンクリックイベント
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            _logger.LogDebug("ボタンがクリックされました。");
            try
            {
                // 何かの処理
                int result = 10 / 0; // 例外を発生させる例
            }
            catch (DivideByZeroException ex)
            {
                _logger.LogError(ex, "ゼロ除算エラーが発生しました。");
            }
        }
    }
}
```

#### 3\. データモデル (`MyDataItem.cs`)

キャッシュするデータの型を定義します。

```csharp
using System;

namespace YourAppName
{
    public class MyDataItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Value { get; set; }
        public DateTime LastUpdated { get; set; } // キャッシュデータの鮮度管理に役立つ
    }
}
```

#### 4\. データキャッシュサービス (`DataCacheService.cs`)

データベースキャッシュの保存と読み込み、および古いキャッシュファイルの削除ロジックをカプセル化します。

```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging; // ILogger を使用

namespace YourAppName
{
    public class DataCacheService
    {
        private readonly ILogger<DataCacheService> _logger;
        private readonly string _cacheDirectory;
        private const string CacheFileName = "db_cache.json";
        private const int CacheRetentionDays = 7; // キャッシュ保持期間

        public DataCacheService(ILogger<DataCacheService> logger)
        {
            _logger = logger;
            // ユーザーのローカルAppDataフォルダにアプリケーション固有のキャッシュフォルダを作成
            _cacheDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "YourAppName", "cache");

            // ディレクトリが存在しない場合は作成
            if (!Directory.Exists(_cacheDirectory))
            {
                Directory.CreateDirectory(_cacheDirectory);
                _logger.LogInformation($"キャッシュディレクトリを作成しました: {_cacheDirectory}");
            }
        }

        /// <summary>
        /// データをJSON形式でキャッシュファイルに保存します。
        /// </summary>
        /// <param name="data">キャッシュするデータリスト</param>
        public async Task SaveDataCacheAsync(List<MyDataItem> data)
        {
            string cacheFilePath = Path.Combine(_cacheDirectory, CacheFileName);

            try
            {
                var options = new JsonSerializerOptions { WriteIndented = true }; // 読みやすく整形
                string jsonString = JsonSerializer.Serialize(data, options);
                await File.WriteAllTextAsync(cacheFilePath, jsonString);
                _logger.LogInformation($"データベースキャッシュを {cacheFilePath} に保存しました。");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "データベースキャッシュの保存中にエラーが発生しました。");
            }
        }

        /// <summary>
        /// キャッシュファイルを読み込み、有効期限内の場合はデータを返します。
        /// </summary>
        /// <returns>キャッシュデータ、または有効期限切れ/ファイルが存在しない場合はnull</returns>
        public async Task<List<MyDataItem>> LoadDataCacheAsync()
        {
            string cacheFilePath = Path.Combine(_cacheDirectory, CacheFileName);

            // 古いキャッシュファイルをクリーンアップ
            CleanOldCacheFiles(_cacheDirectory, CacheRetentionDays);

            if (File.Exists(cacheFilePath))
            {
                try
                {
                    // ファイルの最終更新日時をチェック（既にCleanOldCacheFilesで処理済みだが念のため）
                    if (DateTime.Now.Subtract(File.GetLastWriteTime(cacheFilePath)).TotalDays > CacheRetentionDays)
                    {
                        _logger.LogInformation($"キャッシュファイル {cacheFilePath} は有効期限切れです。");
                        // CleanOldCacheFiles で削除されるはずだが、もし残っていたらここで削除するロジックも追加可能
                        // File.Delete(cacheFilePath);
                        return null;
                    }

                    string jsonString = await File.ReadAllTextAsync(cacheFilePath);
                    var cachedData = JsonSerializer.Deserialize<List<MyDataItem>>(jsonString);
                    _logger.LogInformation($"データベースキャッシュを {cacheFilePath} から読み込みました。");
                    return cachedData;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "データベースキャッシュの読み込み中にエラーが発生しました。ファイルが破損している可能性があります。");
                    // 読み込みに失敗した場合、破損したファイルを削除することも検討
                    try
                    {
                        File.Delete(cacheFilePath);
                        _logger.LogWarning($"破損したキャッシュファイル {cacheFilePath} を削除しました。");
                    }
                    catch (Exception deleteEx)
                    {
                        _logger.LogError(deleteEx, $"破損したキャッシュファイルの削除に失敗しました: {cacheFilePath}");
                    }
                    return null;
                }
            }
            _logger.LogInformation($"キャッシュファイル {cacheFilePath} が見つかりませんでした。");
            return null; // ファイルが存在しない場合
        }

        /// <summary>
        /// 指定されたディレクトリ内の古いキャッシュファイルを削除します。
        /// </summary>
        /// <param name="directoryPath">キャッシュファイルが存在するディレクトリのパス</param>
        /// <param name="retentionDays">ファイルを保持する日数</param>
        private void CleanOldCacheFiles(string directoryPath, int retentionDays)
        {
            _logger.LogDebug($"キャッシュディレクトリ '{directoryPath}' のクリーンアップを開始します。");
            try
            {
                // ディレクトリが存在しない場合は処理をスキップ
                if (!Directory.Exists(directoryPath))
                {
                    _logger.LogDebug($"キャッシュディレクトリ '{directoryPath}' が存在しないため、クリーンアップをスキップします。");
                    return;
                }

                foreach (string filePath in Directory.EnumerateFiles(directoryPath))
                {
                    // ファイル名がCacheFileNameと一致する場合のみチェック（複数ファイルがある可能性も考慮）
                    if (Path.GetFileName(filePath).Equals(CacheFileName, StringComparison.OrdinalIgnoreCase))
                    {
                        if ((DateTime.Now - File.GetLastWriteTime(filePath)).TotalDays > retentionDays)
                        {
                            File.Delete(filePath);
                            _logger.LogInformation($"古いキャッシュファイル {filePath} を削除しました。");
                        }
                    }
                }
                _logger.LogDebug($"キャッシュディレクトリ '{directoryPath}' のクリーンアップが完了しました。");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"古いキャッシュファイルのクリーンアップ中にエラーが発生しました: {directoryPath}");
            }
        }
    }
}
```

-----

### まとめとポイント

  * **`Microsoft.Extensions.Logging` の利用**: `ILogger<T>` インターフェースを通じてログを記録することで、ロギングの実装詳細（Serilogを使っていることなど）からコードを分離できます。
  * **Serilog との統合**: `Serilog.Extensions.Logging` パッケージを使うことで、`Microsoft.Extensions.Logging` から Serilog の強力なファイル出力機能を利用できます。
  * **`appsettings.json` での設定**: ロギングの設定（ログレベル、ファイルパス、ローテーション設定など）をコードから分離し、設定ファイルで柔軟に変更できます。
      * `%LOCALAPPDATA%/YourAppName/logs/log-.txt` のようにパスを指定することで、ユーザーのローカルAppDataフォルダに日付ごとのログファイルが自動的に生成され、7日間の保持期間も自動で管理されます。
  * **データキャッシュの保存場所**: ログと同様に`%LOCALAPPDATA%/YourAppName/cache`以下に保存します。
  * **キャッシュデータの形式**: `System.Text.Json` (または `Newtonsoft.Json`) を使用して、データをJSON形式でファイルにシリアライズ/デシリアライズします。これにより、複雑なデータ構造も扱いやすくなります。
  * **キャッシュの有効期限管理**: `DataCacheService` 内で `File.GetLastWriteTime()` を使用し、ファイルが最後に書き込まれてから7日以上経過しているかをチェックし、古いファイルを削除するロジックを実装しています。
  * **DI (依存性注入) の活用**: `App.xaml.cs` でDIコンテナを設定し、`ILogger<T>` や `DataCacheService` をコンストラクタインジェクションすることで、コードの疎結合性とテスト容易性を高めています。
  * **非同期処理**: ファイルI/OはUIスレッドをブロックする可能性があるため、`async/await` を使用して非同期で実行し、アプリケーションの応答性を保ちます。
  * **エラーハンドリング**: ファイル操作はエラーが発生しやすいため、`try-catch` ブロックで適切に例外を処理し、ログに記録することが重要です。

この実装で、ご要望の「動作ログとデータベース格納データをユーザーフォルダ以下にテキストファイルでキャッシュを7日間残す」機能を実現できるはずです。